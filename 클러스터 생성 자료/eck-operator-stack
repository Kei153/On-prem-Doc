** eck-operator-stack 은 elastic 재단의 여러 오픈소스를 한꺼번에 관리해주는 패키지 같은 아이다.
  이 operator를 설치하면 kubectl 명령어를 이용해 yaml 파일로 된 elastic 오픈 소스를 생성, 관리 삭제 가능하다! 아주 편함!!


1️⃣ 먼저 artifacthub.io 에 가서 eck-operator.yaml 파일을 다운받는다
  그러고 필요한 값을 k8s 구성 환경에 맞게 수정한다.
  operator 경우엔 별다른 설정은 없었고, resources 와 nodeSelector, tolerations 정도만 수정하였다.

2️⃣ cmd.sh를 만들어 업그레이드에 용이하게 한다.
  helm upgrade --install eck-operator elastic/eck-operator \
  -n eck --create-namespace \
  -f values-eck-operator.yaml

  operator가 정상 설치 되고 나면 elastic 오픈소스를 yaml 파일을 이용해 배포 가능해짐


3️⃣ 먼저,eck-elasticsearch를 설치 했다.
elasticsearch 서비스 타입을 LoadBalancer Type으로 한다. api 접근이 있을지도 몰라서...

-------------------------------------------------------------------------

-- elasticsearch.yaml 파일
  apiVersion: elasticsearch.k8s.elastic.co/v1
  kind: Elasticsearch
  metadata:
    name: elasticsearch
    namespace: eck
  spec:
    version: 8.17.6
    http:
      service:
        spec:
          type: LoadBalancer
    nodeSets:
      - name: master-node
        count: 3
        config:
          node.roles: [ "master" ]
          node.store.allow_mmap: false
        podTemplate:
          spec:
            tolerations:
              - key: "Service"
                operator: "Equal"
                value: "system"
                effect: "NoSchedule"
        volumeClaimTemplates:
          - metadata:
              name: elasticsearch-data
            spec:
              accessModes: [ "ReadWriteOnce" ]
              storageClassName: nfs-storage-eck # ✅ 미리 nfs 서버 마운트 경로(마스터 노드에 디렉토리 만들어 놓을 것) 준비
              resources:
                requests:
                  storage: 10Gi
  
      - name: data-node
        count: 3
        config:
          node.roles: [ "data" ]
          node.store.allow_mmap: false
        podTemplate:
          spec:
            tolerations:
              - key: "Service"
                operator: "Equal"
                value: "system"
                effect: "NoSchedule"
        volumeClaimTemplates:
          - metadata:
              name: elasticsearch-data
            spec:
              accessModes: [ "ReadWriteOnce" ]
              storageClassName: nfs-storage-eck # ✅ 미리 nfs 서버 마운트 경로(마스터 노드에 디렉토리 만들어 놓을 것) 준비
              resources:
                requests:
                  storage: 50Gi



---------------------------------------------------------------------------------------------

4️⃣ 위의 파일만 kubectl apply -f elasticsearch.yaml 해도 관련된 service, secret, config 등도 설치가 된다.
  나중에 elasticsearch 에 접속해 작업할 일이 많다면 서비스 : elasticsearch-es-http 의 ip를 접속해서 작업한다.


5️⃣ eck-kibana도 설치 했다.

-- kibana.yaml

apiVersion: kibana.k8s.elastic.co/v1
kind: Kibana
metadata:
  name: kibana
  namespace: eck
spec:
  version: 8.17.6
  count: 1
  elasticsearchRef:
    name: elasticsearch
  http:
    service:
      spec:
        type: ClusterIP
  podTemplate:
    spec:
      tolerations: # ✅
        - key: "Service"
          operator: "Equal"
          value: "system"
          effect: "NoSchedule"
  config:
    server.publicBaseUrl: https://dev-eck-kibana.laon-ezplanet.com
    # server.ssl.enabled: false  # ✅ 원래 Ingress에서 TLS 종단하므로 내부는 HTTP 유지하나, 이 오픈소스는 백엔드도 https 통신
  # volumeClaimTemplates: # ✅ 원래 키바나는 PersistentVolumeClaim을 사용하지 않음.
  #   - metadata:
  #       name: kibana-data
  #     spec:
  #       accessModes: [ "ReadWriteOnce" ]
  #       storageClassName: nfs-storage-eck
  #       resources:
  #         requests:
  #           storage: 20Gi
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kibana-ingress
  namespace: eck
  annotations:
    ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-azure-dns # ✅ azure-dns에 도메인 등록해 놓음
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS" # ✅ http로는 백엔드 통신 안됨
spec:
  ingressClassName: nginx  # ✅ 이게 반드시 있어야 함
  tls:
    - hosts:
        - dev-eck-kibana.laon-ezplanet.com
      secretName: eck-kibana-tls
  rules:
    - host: dev-eck-kibana.laon-ezplanet.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: kibana-kb-http
                port:
                  number: 5601

-------------------------------------------------------------------------------------


6️⃣ 그 외 ...

(ex) 사용자 생성
-----------------------------------------------------------------------------

curl -X POST https://{ELASTICSEARCH_HOST}:9200/_security/user/admin \
  -u elastic:엘라스틱비밀번호 \
  -k \
  -H "Content-Type: application/json" \
  -d '{
    "password": "<비번입력>", 
    "roles": [ "superuser" ], #✅ role 형태는 상황에 맞춰서 변경
    "full_name": "<사용자입력>",
    "email": "<이메일입력>"
}'

응답 : {"created":true}% 

확인: curl -k -u elastic:<엘라스틱비밀번호> "{ELASTICSEARCH_HOST}:9200/_security/user/admin?pretty"
  키:값 형태로 나온다.



